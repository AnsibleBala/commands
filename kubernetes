1. Install 3 centos 7 servers

1. 35.245.254.20       kuber-master (2 CPU minimum and 2 GB RAM)
2. 35.194.76.149       kuber-client1 (1 CPU minimum and 2 GB RAM)
3. 35.188.241.6         kuber-client2 (1 CPU minimum and 2 GB RAM)
  
2. Create user called docker in all above 3 machines and set the password as redhat
  vi /etc/ssh/sshd_config
  
# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication yes
#PermitEmptyPasswords no
#PasswordAuthentication no

3.	Install epel-release repository in all machines

#yum install epel-release vim -y

4. Disable firewalld in all 3 machines

systemctl stop firewalld;systemctl disable firewalld

4.1  create docker user in all machines and set the password as redhat

5.	Login to all above 3 servers and enable sudo permission for docker user with no password

Run visudo command

docker ALL=(ALL) NOPASSWD: ALL

6.	Add the following in /etc/hosts file in all 3 machines

10.142.0.9 kuber-master1.us-east1-b.c.folkloric-grid-221412.internal kuber-master1 
10.142.0.10 kuber-client3.us-east1-b.c.folkloric-grid-221412.internal kuber-client3
10.142.0.11 kuber-client4.us-east1-b.c.folkloric-grid-221412.internal kuber-client4 

7. Run the command below to disable SELinux.

#setenforce 0;sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

8. Enable br_netfilter Kernel Module
	The br_netfilter module is required for kubernetes installation. Enable this kernel module so that the packets traversing the bridge are processed by	 iptables for filtering and for port forwarding, and the kubernetes pods across the cluster can communicate with each other.

	Run the command below to enable the br_netfilter kernel module.

# modprobe br_netfilter;echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables


9. Disable SWAP
	Disable SWAP for kubernetes installation by running the following commands.

swapoff -a	and disable the entry in /etc/fstab.

*****************************************************************************************************************

Install The Docker on all the 3 machines:



1. Install required packages. yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.

$ yum install yum-utils device-mapper-persistent-data lvm2 -y


2. Use the following command to set up the stable repository. You always need the stable repository, even if you want to install builds from the edge or test repositories as well.

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo


yum install -y --setopt=obsoletes=0 docker-ce-17.03.2.ce-1.el7.centos docker-ce-selinux-17.03.0.ce-1.el7.centos



5. Start Docker.

$ sudo systemctl start docker;systemctl enable docker;systemctl status docker

6. Verify that docker is installed correctly by running the hello-world image.

$ sudo docker run hello-world

7. To see docker version 

docker version

[root@kuber-master shankerloud1989]# docker version
Client:
 Version:      17.03.2-ce
 API version:  1.27
 Go version:   go1.7.5
 Git commit:   f5ec1e2
 Built:        Tue Jun 27 02:21:36 2017
 OS/Arch:      linux/amd64
Server:
 Version:      17.03.2-ce
 API version:  1.27 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   f5ec1e2
 Built:        Tue Jun 27 02:21:36 2017
 OS/Arch:      linux/amd64
 Experimental: false
 
 

***************************************************************************
Kubeadm configurtion --> create this repo file in all 3 machines and install kubadm in all machine



vi /etc/yum.repos.d/kubernetes.repo 
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*


yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes (all machines)

systemctl enable kubelet && systemctl start kubelet (all machines)


*************************************************************************

Only perform this below command in kubernetes in the master only

kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.142.0.9

10.142.0.2 --> kubernetes master server IP Address

*****************************************************************************
login as an docker user in kubernetes master server


To start using your cluster, you need to run the following as a regular user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config



Run 'kubectl get nodes' on the master to see this node join the cluster.


****************************************************************************************************


You can now join any number of machines by running the following on each node as root:

kubeadm join 10.142.0.9:6443 --token s5ljeu.43wrsvdykzj1hhe9 --discovery-token-ca-cert-hash sha256:c27c53038c52831ed495c0f97fff8dbe617d954c4b082c9f2f325abf1049fec9


**************************************

now in kuber-master server

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml


now i am getting the following error when i execute the above  command

root@kuber-master shankerloud1989]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86
c5cd2643275/Documentation/kube-flannel.yml
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
unable to recognize "https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-fl
annel.yml": Get http://localhost:8080/api?timeout=32s: dial tcp [::1]:8080: connect: connection refused
